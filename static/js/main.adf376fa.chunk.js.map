{"version":3,"sources":["assets/images/robotjs.png","utils/index.js","components/Robot/Robot.jsx","components/battlefield/BattleField.jsx","components/tableTop/TableTop.jsx","state/action-creators/positionActionCreators.js","components/place-input/PlaceInput.jsx","components/control-panel/ControlPanel.jsx","components/dashboard/Dashboard.jsx","components/music-player/Player.jsx","components/robot-selection/RobotSelection.jsx","screens/RobotStage.jsx","App.js","reportWebVitals.js","state/reducers/positionReducer.js","state/reducers/index.js","state/store.js","index.js"],"names":["isTrue","value","isInt","isNaN","num","parseFloat","colorRotate","keyframes","flame","StyledRobot","styled","span","props","positionY","positionX","robotjs","face","property_name","isPlaced","isActived","robotNo","Robot","robot","useSelector","state","robots","filter","activeRobotNo","checkIfPlaced","x","y","BattleField","className","map","TableTop","moveRobot","data","dispatch","type","payload","leftTurnRobot","rightTurnRobot","reportPosition","placeNewRobot","selectRobot","resetBattle","deleteRobot","PlaceInput","setIsMusicPlaying","useDispatch","bindActionCreators","actionCreators","useState","undefined","placedNewRobot","setPlacedNewRobot","htmlFor","id","onChange","e","target","parseInt","onClick","ControlPanel","length","Dashboard","isReporting","Player","url","isMusicPlaying","Audio","audio","useEffect","play","pause","addEventListener","removeEventListener","useAudio","playing","toggle","RobotSelection","RobotStage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","totalNo","positionReducer","action","newArray","Math","abs","console","log","filteredRobots","allRobotNo","max","apply","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+wBAAe,G,MAAA,IAA0B,qCCA5BA,EAAS,SAACC,GAAD,OAAsB,IAAVA,GAAqBA,GAG1CC,EAAQ,SAACD,GAElB,GAAIE,MAAMF,GACP,OAAO,EAEV,IAAMG,EAAMC,WAAWJ,GAEvB,OAAc,EAANG,KAAaA,G,OCFnBE,EAAcC,YAAH,4KAKXC,EAAQD,YAAH,kQAWLE,EAAcC,IAAOC,KAAV,0gCAKL,SAACC,GAAD,OAA6B,GAAlBA,EAAMC,UAAiB,KACpC,SAACD,GAAD,OAA6B,GAAlBA,EAAME,UAAiB,IAClBC,GAEJ,SAACH,GAAD,OAAwB,GAAbA,EAAMI,QACjC,SAACJ,GAAD,OAAWA,EAAMK,iBAIV,SAACL,GAAD,OAAWA,EAAMM,YAElB,SAACN,GAAD,OACRA,EAAMO,UAAY,4BAA8B,UAElCb,GAIF,SAACM,GAAD,OAAWA,EAAMQ,WAwBlB,SAAAR,GAAK,OAAIA,EAAMO,UAAY,EAAG,IAC5BX,GAqDFa,EAhDD,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QACTE,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOA,OAAOC,QAAO,SAACJ,GAAD,OAAWA,EAAMF,UAAYA,KAAS,MAUhGO,EAAgBJ,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOE,iBAGpDC,EAAgB,SAACN,GAAD,SACpBtB,EAAOsB,EAAMO,IAAM7B,EAAOsB,EAAMQ,IAAM9B,EAAOsB,EAAMN,QAgBrD,OAAIM,GAASM,EAAcN,GAEvB,mCACE,cAACb,EAAD,CACEK,UAAWQ,EAAMO,EACjBhB,UAAWS,EAAMQ,EACjBd,KAAMM,EAAMN,KACZI,QAASE,EAAMF,QACfD,UAdFG,EAAMF,UAAYO,EAehBT,SAAUU,EAAcN,GAAS,EAAI,MAKtC,MC3EMS,G,MA3CK,WAGhB,IAAMN,EAASF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOA,UAIjD,OACI,sBAAKO,UAAU,cAAf,UAEQP,EAAOQ,KAAI,SAACX,GACR,OAAO,cAAC,EAAD,CAA2BF,QAASE,EAAMF,SAA9BE,EAAMF,YAGjC,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,6BC9BGc,G,MARE,WACb,OACI,qBAAKF,UAAU,YAAf,SACI,cAAC,EAAD,QCPCG,G,MAAY,SAACC,GACxB,OAAO,SAACC,GACNA,EAAS,CACPC,KAAM,OACNC,QAASH,OAKFI,EAAgB,SAACJ,GAC5B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAM,OACNC,QAASH,MAKFK,EAAiB,SAACL,GAC7B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAM,QACNC,QAASH,MAMFM,EAAiB,SAACN,GAC3B,OAAO,SAACC,GACJA,EAAS,CACLC,KAAM,SACNC,QAASH,MAeRO,EAAgB,SAACP,GAC5B,OAAO,SAACC,GACJA,EAAS,CACLC,KAAM,YACNC,QAASH,MAMNQ,EAAc,SAACR,GAC1B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAM,SACNC,QAASH,MAMFS,EAAc,WACzB,OAAO,SAACR,GACNA,EAAS,CACPC,KAAM,YAKCQ,EAAc,SAACV,GAC1B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAM,SACNC,QAASH,M,cCHAW,G,MArEI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAEdX,EAAWY,cAETN,EAAkBO,6BAAmBC,EAAgBd,GAArDM,cAJoC,EAMAS,mBAAS,CACnDvB,OAAGwB,EACHvB,OAAGuB,EACHrC,UAAMqC,IAToC,mBAMrCC,EANqC,KAMrBC,EANqB,KAuC5C,OACE,sBAAKvB,UAAU,cAAf,UACE,uBAAOwB,QAAQ,gBAAf,iBACA,uBAAOlB,KAAK,SAASmB,GAAG,gBAAgBC,SA9BhB,SAACC,GACvBzD,EAAMyD,EAAEC,OAAO3D,QACjBsD,EAAkB,2BACbD,GADY,IAEfzB,EAAGgC,SAASF,EAAEC,OAAO3D,aA2BvB,uBAAOuD,QAAQ,gBAAf,iBACA,uBAAOlB,KAAK,SAASmB,GAAG,gBAAgBC,SAvBhB,SAACC,GACvBzD,EAAMyD,EAAEC,OAAO3D,QACjBsD,EAAkB,2BACbD,GADY,IAEfxB,EAAG+B,SAASF,EAAEC,OAAO3D,aAoBvB,uBAAOuD,QAAQ,mBAAf,sBACA,yBACEC,GAAG,mBACHC,SAlByB,SAACC,GAC1BzD,EAAMyD,EAAEC,OAAO3D,QACjBsD,EAAkB,2BACbD,GADY,IAEftC,KAAM6C,SAASF,EAAEC,OAAO3D,WAexBA,MAAOqD,EAAetC,KAHxB,UAKE,wBAAQf,MAAM,KACd,wBAAQA,MAAM,IAAd,mBACA,wBAAQA,MAAM,IAAd,kBACA,wBAAQA,MAAM,IAAd,mBACA,wBAAQA,MAAM,IAAd,qBAEF,wBACE6D,QAAS,WACPd,GAAkB,GAClBL,EAAcW,IAHlB,4BCeSS,EAxEM,SAAC,GAA2B,IAAzBf,EAAwB,EAAxBA,kBAGhBvB,EAASF,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOA,UAC7CE,EAAgBJ,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOE,iBAEpDU,EAAWY,cAN6B,EAmB1CC,6BAAmBC,EAAgBd,GALrCF,EAd4C,EAc5CA,UACAK,EAf4C,EAe5CA,cACAC,EAhB4C,EAgB5CA,eACAC,EAjB4C,EAiB5CA,eACAG,EAlB4C,EAkB5CA,YAGF,OAAIpB,EAAOuC,OAAS,EAEhB,sBAAKhC,UAAU,gBAAf,UACE,cAAC,EAAD,CAAYgB,kBAAmBA,IAC/B,wBACEc,QAAS,WACPjB,IACAG,GAAkB,IAHtB,mBAQA,wBACEc,QAAS,WACP3B,EAAUR,IAFd,kBAQA,wBACEmC,QAAS,WACPtB,EAAcb,IAFlB,kBAQA,wBACEmC,QAAS,WACPrB,EAAed,IAFnB,mBASA,wBACEmC,QAAS,WACPpB,EAAef,IAFnB,uBAWC,cAAC,EAAD,CAAYqB,kBAAmBA,KChCzBiB,EAzCG,WAEd,IAGQjD,EAHFM,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOA,OAAOC,QAAO,SAACJ,GAAD,OAAWA,EAAMF,UAAYI,EAAMC,OAAOE,iBAAe,MAEzH,OAAIL,GAGmB,IAAfA,EAAMN,OACNA,EAAO,SAGQ,IAAfM,EAAMN,OACNA,EAAO,QAGQ,IAAfM,EAAMN,OACNA,EAAO,SAGQ,IAAfM,EAAMN,OACNA,EAAO,QAIP,gCACI,2CACA,8BAA2B,IAAtBM,EAAM4C,YAAN,kBAAwC5C,EAAMO,EAA9C,YAAmDP,EAAMQ,EAAzD,YAA8Dd,GAAS,SAMpF,8BACI,oDCCGmD,G,YAhCA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,eAAgBrB,EAAwB,EAAxBA,kBAAwB,EAE1C,SAAAoB,GAAQ,IAAD,EACJhB,mBAAS,IAAIkB,MAAMF,IAA5BG,EADa,oBAmBpB,OAbAC,qBAAU,WACNH,EAAiBE,EAAME,OAASF,EAAMG,UAExC,CAACL,IAGHG,qBAAU,WAER,OADAD,EAAMI,iBAAiB,SAAS,kBAAM3B,GAAkB,MACjD,WACLuB,EAAMK,oBAAoB,SAAS,kBAAM5B,GAAkB,SAE5D,IAEI,CAACqB,EAfO,kBAAMrB,GAAmBqB,KAiBpBQ,CAAST,GAvB0B,mBAuBtDU,EAvBsD,KAuB7CC,EAvB6C,KAyB7D,OACE,qBAAK/C,UAAU,eAAf,SACE,wBAAQ8B,QAASiB,EAAjB,SAA0BD,EAAU,QAAU,aCWrCE,EAnCQ,WACrB,IAAMvD,EAASF,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOA,UAE7CY,EAAWY,cAEjB,OAAIxB,EAAOuC,OAAS,EAEhB,qBAAKhC,UAAU,wBAAf,SACGP,EAAOQ,KAAI,SAACX,GACX,OACE,gCACE,wBACEwC,QAAS,WACPzB,EAASO,EAAYtB,EAAMF,WAF/B,SAKGE,EAAMF,UAET,yBACE0C,QAAS,WACPzB,EAASS,EAAYxB,EAAMF,WAF/B,iBAKOE,EAAMF,aAbLE,EAAMF,cAsBnB,iDCVM6D,EAtBI,WAAO,IAAD,EACqB7B,oBAAS,GAD9B,mBAChBiB,EADgB,KACArB,EADA,KAGvB,OACE,uBAAMhB,UAAU,cAAhB,UACE,qBAAKA,UAAU,yBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,4BAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAcgB,kBAAmBA,IACjC,cAAC,EAAD,OAEF,cAAC,EAAD,CACEoB,IAAK,iEACLC,eAAgBA,EAChBrB,kBAAmBA,QCbZkC,MARf,WACE,OACE,qBAAKlD,UAAU,MAAf,SACE,cAAC,EAAD,OCMSmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCLRQ,EAAe,CACnBC,QAAS,EACTlE,mBAAe0B,EACf5B,OAAQ,IA4VKqE,EAxUS,WAAmC,IAAlCtE,EAAiC,uDAAzBoE,EAAcG,EAAW,uCACxD,OAAQA,EAAOzD,MACb,IAAK,YACH,OACEyD,EAAOxD,QAAQV,GAAK,GACpBkE,EAAOxD,QAAQT,GAAK,GACpBiE,EAAOxD,QAAQV,GAAK,GACpBkE,EAAOxD,QAAQT,GAAK,GACpB9B,EAAO+F,EAAOxD,QAAQvB,MAEf,2BACFQ,GADL,IAEEqE,UAAWrE,EAAMqE,QAEjBlE,cAAeH,EAAMqE,QACrBpE,OAAO,GAAD,mBACDD,EAAMC,QADL,CAEJ,CACEL,QAASI,EAAMqE,QACfhE,EAAGkE,EAAOxD,QAAQV,EAClBC,EAAGiE,EAAOxD,QAAQT,EAClBd,KAAM+E,EAAOxD,QAAQvB,KACrBkD,aAAa,OAMd1C,EAqBT,IAAK,OAOH,IAAMwE,EAAWxE,EAAMC,OAAOQ,KAAI,SAACX,GACjC,OAAIA,EAAMF,UAAY2E,EAAOxD,QACR,IAAfjB,EAAMN,MAAcM,EAAMQ,EAAI,EACzB,2BACFR,GADL,IAEEQ,IAAKR,EAAMQ,EACXoC,aAAa,IAGE,IAAf5C,EAAMN,MAAcM,EAAMO,EAAI,EACzB,2BACFP,GADL,IAEEO,IAAKP,EAAMO,EACXqC,aAAa,IAGE,IAAf5C,EAAMN,MAAcM,EAAMQ,EAAI,EACzB,2BACFR,GADL,IAEEQ,IAAKR,EAAMQ,EACXoC,aAAa,IAGE,IAAf5C,EAAMN,MAAcM,EAAMO,EAAI,EACzB,2BACFP,GADL,IAEEO,IAAKP,EAAMO,EACXqC,aAAa,IAGV5C,EAEFA,KAiDT,OAAO,2BACFE,GADL,IAEEC,OAAQuE,IAIZ,IAAK,OAyBH,IAAMA,EAAWxE,EAAMC,OAAOQ,KAAI,SAACX,GACjC,OAAIA,EAAMF,UAAY2E,EAAOxD,QACR,IAAfjB,EAAMN,KACD,2BACFM,GADL,IAEEN,KAAM,EACNkD,aAAa,IAGV,2BACF5C,GADL,IAEEN,KAAMiF,KAAKC,KAAK5E,EAAMN,KAAO,GAAK,GAClCkD,aAAa,IAGR5C,KAIX,OAAO,2BACFE,GADL,IAEEC,OAAQuE,IAIZ,IAAK,QAqBH,IAAMA,EAAWxE,EAAMC,OAAOQ,KAAI,SAACX,GACjC,OAAIA,EAAMF,UAAY2E,EAAOxD,QACpB,2BACFjB,GADL,IAEEN,KAAMiF,KAAKC,KAAK5E,EAAMN,KAAO,GAAK,GAClCkD,aAAa,IAGR5C,KAIX,OAAO,2BACFE,GADL,IAEEC,OAAQuE,IAIZ,IAAK,SASH,IAAMA,EAAWxE,EAAMC,OAAOQ,KAAI,SAACX,GAEjC,OAAIA,EAAMF,UAAY2E,EAAOxD,QACpB,2BACFjB,GADL,IAEE4C,aAAa,KAGfiC,QAAQC,IAAI,WACL9E,MAIX,OAAO,2BACFE,GADL,IAEEC,OAAQuE,IAIZ,IAAK,QACH,OAAO,2BACFxE,GADL,IAEEqE,QAAS,EACTlE,mBAAe0B,EACf5B,OAAQ,KAIZ,IAAK,SACH,OAAO,2BACFD,GADL,IAEEG,cAAeoE,EAAOxD,UAI1B,IAAK,SACH,IAAM8D,EAAiB7E,EAAMC,OAAOC,QAClC,SAACJ,GAAD,OAAWA,EAAMF,UAAY2E,EAAOxD,WAkBtC,GAA8B,IAA1B8D,EAAerC,OACjB,OAAO,2BACFxC,GADL,IAEEG,mBAAe0B,EACf5B,OAAQ,KAIZ,GAAI4E,EAAerC,OAAS,GAAKxC,EAAMG,gBAAkBoE,EAAOxD,QAAS,CAEvE,IAAM+D,EAAaD,EAAepE,KAAI,SAAAX,GAAK,OAAKA,EAAMF,WACtD,OAAO,2BACFI,GADL,IAEEG,cAAesE,KAAKM,IAAIC,MAAMP,KAAMK,GACpC7E,OAAQ4E,IAKZ,OAAO,2BACF7E,GADL,IAEEC,OAAQ4E,IAIZ,QACE,OAAO7E,ICnVEiF,EALEC,0BAAgB,CAE7BjF,W,gBCASkF,EAAQC,sBAAYH,EAAU,GAAII,8BAAoBC,0BAAgBC,OCGnFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFQ,SAASC,eAAe,SAM1BjC,M","file":"static/js/main.adf376fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robotjs.fe2c899b.png\";","export const isTrue = (value) => (value === 0 ? true : value);\r\n//when it's 0, it is true\r\n\r\nexport const isInt = (value) => {\r\n\r\n    if (isNaN(value)) {\r\n       return false\r\n    } \r\n    const num = parseFloat(value)\r\n  \r\n    return (num | 0) === num;\r\n}","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport \"./Robot.scss\";\r\n// import robot from \"../../assets/images/robot.png\";\r\nimport robotjs from \"../../assets/images/robotjs.png\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isTrue } from \"../../utils\";\r\n\r\nconst colorRotate = keyframes`\r\n  0% {filter:drop-shadow(0 1rem 1rem lightgreen) hue-rotate(0deg);  }\r\n  100% {filter:drop-shadow(0 1rem 1rem lightgreen) hue-rotate(360deg);}\r\n`;\r\n\r\nconst flame = keyframes`\r\n  0%,20%,40%,60%,80%,100% {\r\n    transform: translateX(-45%) translateY(0);\r\n    background-color: orangered\r\n  }\r\n  10%, 30%,50%,70%,90% {\r\n    transform: translateX(-45%) translateY(-.4rem);\r\n    background-color: orange;\r\n  }\r\n`;\r\n\r\nconst StyledRobot = styled.span`\r\n  position: absolute;\r\n  width: 18%;\r\n  aspect-ratio: 1;\r\n  display: flex;\r\n  bottom: ${(props) => props.positionY * 20 + 1}%;\r\n  left: ${(props) => props.positionX * 20 + 1}%;\r\n  background-image: url(${robotjs});\r\n  background-size: 100% 100%;\r\n  transform: rotate(${(props) => props.face * 90}deg);\r\n  //${(props) => props.property_name}\r\n\r\n  justify-content: center;\r\n  align-items: center;\r\n  opacity: ${(props) => props.isPlaced};\r\n\r\n  filter: ${(props) =>\r\n    props.isActived ? \"drop-shadow(0 0 1rem red)\" : \"unset\"};\r\n\r\n  /* animation: ${colorRotate} 5s linear infinite; */\r\n  transition: all 1s linear;\r\n\r\n  &::before {\r\n    content: \"${(props) => props.robotNo}\"; //wired: have to wrap it with ' '\r\n    color: white;\r\n    position: absolute;\r\n    height: 2.4rem;\r\n    width: 2.4rem;\r\n\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 2px #fff solid;\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    border-radius: 50%;\r\n    bottom: -1.5rem;\r\n    left: 50%;\r\n    transform: translateX(-45%);\r\n    width: 2rem;\r\n    height: 2rem;\r\n    background-color: orangered;\r\n    filter: blur(0.8rem);\r\n    opacity: ${props => props.isActived ? 1: 0};\r\n    animation: ${flame} 1s linear infinite;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nconst Robot = ({ robotNo }) => {\r\n  const robot = useSelector((state) => state.robots.robots.filter((robot) => robot.robotNo === robotNo)[0]);\r\n  \r\n  //if we use  state.robots.robots[robotNo - 1]\r\n  // when deleting one robot, lets say you have 4 robots atm, if robot No.3 got deleted, \r\n\r\n  //robots: [{1}, {2}, {3}, {4}]  -> robots: [{1}, {2}, {4}]\r\n  //robot-rendered: robots[0] robots[1] robots[2] robots[3] -> robots[0] robots[1] robots[3]\r\n  //robots[3] is not available\r\n\r\n\r\n  const activeRobotNo = useSelector((state) => state.robots.activeRobotNo);\r\n\r\n  ///check if the robot has been placed on the table\r\n  const checkIfPlaced = (robot) =>\r\n    isTrue(robot.x) && isTrue(robot.y) && isTrue(robot.face) ? true : false;\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  //   console.log(robot);\r\n  //   console.log(isTrue(robot.x));\r\n  //   console.log(checkIfPlaced(robot));\r\n\r\n  //////////////////////////////////////////////////////\r\n  ////check if the robot is the activated one\r\n  const checkActived = () => {\r\n    if (robot.robotNo === activeRobotNo) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  if (robot && checkIfPlaced(robot))\r\n    return (\r\n      <>\r\n        <StyledRobot\r\n          positionX={robot.x}\r\n          positionY={robot.y}\r\n          face={robot.face}\r\n          robotNo={robot.robotNo}\r\n          isActived={checkActived()}\r\n          isPlaced={checkIfPlaced(robot) ? 1 : 0}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return null;\r\n};\r\n\r\nexport default Robot;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Robot from '../Robot/Robot';\r\nimport './BattleField.scss'\r\nconst BattleField = () => {\r\n\r\n\r\n    const robots = useSelector(state => state.robots.robots)\r\n\r\n\r\n    \r\n    return (\r\n        <div className=\"battlefield\">\r\n            {\r\n                robots.map((robot) => {\r\n                    return <Robot key={robot.robotNo} robotNo={robot.robotNo} />\r\n                })\r\n            }\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BattleField;","import React from 'react';\r\nimport BattleField from '../battlefield/BattleField';\r\nimport './TableTop.scss'\r\n\r\nconst TableTop = () => {\r\n    return (\r\n        <div className=\"table-top\">\r\n            <BattleField />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableTop;","export const moveRobot = (data) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"MOVE\",\r\n      payload: data\r\n    });\r\n  };\r\n};\r\n\r\nexport const leftTurnRobot = (data) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"LEFT\",\r\n      payload: data\r\n    });\r\n  };\r\n};\r\n\r\nexport const rightTurnRobot = (data) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"RIGHT\",\r\n      payload: data\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const reportPosition = (data) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: \"REPORT\",\r\n            payload: data\r\n        })\r\n    }\r\n}\r\n\r\n// export const placeRobot = (data) => {\r\n//     return (dispatch) => {\r\n//         dispatch({\r\n//             type: \"PLACE\",\r\n//             payload: data,\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\nexport const placeNewRobot = (data) => {\r\n  return (dispatch) => {\r\n      dispatch({\r\n          type: \"PLACE NEW\",\r\n          payload: data,\r\n      })\r\n  }\r\n}\r\n\r\n\r\nexport const selectRobot = (data) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"SELECT\",\r\n      payload: data\r\n    })\r\n  }\r\n}\r\n\r\n\r\nexport const resetBattle = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"RESET\",\r\n    })\r\n  }\r\n}\r\n\r\nexport const deleteRobot = (data) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"DELETE\",\r\n      payload: data\r\n    })\r\n  }\r\n}","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actionCreators } from \"../../state/action-creators\";\r\nimport { isInt } from \"../../utils\";\r\nimport \"./PlaceInput.scss\";\r\n\r\nconst PlaceInput = ({ setIsMusicPlaying }) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { placeNewRobot } = bindActionCreators(actionCreators, dispatch);\r\n\r\n  const [placedNewRobot, setPlacedNewRobot] = useState({\r\n    x: undefined,\r\n    y: undefined,\r\n    face: undefined,\r\n  });\r\n\r\n  const inputXChangeHandler = (e) => {\r\n    if (isInt(e.target.value)) {\r\n      setPlacedNewRobot({\r\n        ...placedNewRobot,\r\n        x: parseInt(e.target.value),\r\n      });\r\n    }\r\n  };\r\n\r\n  const inputYChangeHandler = (e) => {\r\n    if (isInt(e.target.value)) {\r\n      setPlacedNewRobot({\r\n        ...placedNewRobot,\r\n        y: parseInt(e.target.value),\r\n      });\r\n    }\r\n  };\r\n\r\n  const inputFaceChangeHandler = (e) => {\r\n    if (isInt(e.target.value)) {\r\n      setPlacedNewRobot({\r\n        ...placedNewRobot,\r\n        face: parseInt(e.target.value),\r\n      });\r\n    }\r\n  }; //e.target.value is a string - be careful\r\n\r\n  return (\r\n    <div className=\"place-input\">\r\n      <label htmlFor=\"place-input-x\">X: </label>\r\n      <input type=\"number\" id=\"place-input-x\" onChange={inputXChangeHandler} />\r\n      <label htmlFor=\"place-input-y\">Y: </label>\r\n      <input type=\"number\" id=\"place-input-y\" onChange={inputYChangeHandler} />\r\n      <label htmlFor=\"place-input-face\">Facing: </label>\r\n      <select\r\n        id=\"place-input-face\"\r\n        onChange={inputFaceChangeHandler}\r\n        value={placedNewRobot.face}\r\n      >\r\n        <option value=\"\"></option>\r\n        <option value=\"0\">NORTH</option>\r\n        <option value=\"1\">EAST</option>\r\n        <option value=\"2\">SOUTH</option>\r\n        <option value=\"3\">WEST</option>\r\n      </select>\r\n      <button\r\n        onClick={() => {\r\n          setIsMusicPlaying(true);\r\n          placeNewRobot(placedNewRobot);\r\n        }}\r\n      >\r\n        Place New\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaceInput;\r\n","import React from \"react\";\r\nimport \"./ControlPanel.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { actionCreators } from \"../../state/action-creators\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport PlaceInput from \"../place-input/PlaceInput\";\r\n\r\nconst ControlPanel = ({ setIsMusicPlaying }) => {\r\n  // const robot = useSelector((state) => state.robots.robots[state.robots.activeRobotNo-1]);\r\n\r\n  const robots = useSelector((state) => state.robots.robots);\r\n  const activeRobotNo = useSelector((state) => state.robots.activeRobotNo);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // const checkIfPlaced = (robot) =>\r\n  //   isTrue(robot.x) && isTrue(robot.y) && isTrue(robot.face)\r\n  //     ? true\r\n  //     : false;\r\n\r\n  const {\r\n    moveRobot,\r\n    leftTurnRobot,\r\n    rightTurnRobot,\r\n    reportPosition,\r\n    resetBattle,\r\n  } = bindActionCreators(actionCreators, dispatch);\r\n\r\n  if (robots.length > 0)\r\n    return (\r\n      <div className=\"control-panel\">\r\n        <PlaceInput setIsMusicPlaying={setIsMusicPlaying} />\r\n        <button\r\n          onClick={() => {\r\n            resetBattle();\r\n            setIsMusicPlaying(false);\r\n          }}\r\n        >\r\n          Reset\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            moveRobot(activeRobotNo);\r\n          }}\r\n          // disabled={checkIfPlaced(robot) ? false : true}\r\n        >\r\n          Move\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            leftTurnRobot(activeRobotNo);\r\n          }}\r\n          // disabled={checkIfPlaced(robot) ? false : true}\r\n        >\r\n          Left\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            rightTurnRobot(activeRobotNo);\r\n          }}\r\n          // disabled={checkIfPlaced(robot) ? false : true}\r\n        >\r\n          Right\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => {\r\n            reportPosition(activeRobotNo);\r\n          }}\r\n          // disabled={checkIfPlaced(robot) ? false : true}\r\n        >\r\n          Report\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n  return <PlaceInput setIsMusicPlaying={setIsMusicPlaying} />;\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Dashboard = () => {\r\n\r\n    const robot = useSelector((state) => state.robots.robots.filter((robot) => robot.robotNo === state.robots.activeRobotNo)[0]);\r\n   \r\n    if (robot) {\r\n        let face;\r\n\r\n        if (robot.face === 0) {\r\n            face = 'NORTH'\r\n        }\r\n    \r\n        if (robot.face === 1) {\r\n            face = \"EAST\"\r\n        }\r\n    \r\n        if (robot.face === 2) {\r\n            face = \"SOUTH\"\r\n        }\r\n    \r\n        if (robot.face === 3) {\r\n            face = \"WEST\";\r\n        }\r\n    \r\n        return (\r\n            <div>\r\n                <h2>DashBoard</h2>\r\n                <h3>{robot.isReporting === true ? `Output: ${robot.x},${robot.y},${face}` : ''}</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>ROBOT CHALLENGE</h1>\r\n        </div>\r\n    )\r\n\r\n    \r\n\r\n};\r\n\r\nexport default Dashboard;","import React, { useState, useEffect } from \"react\";\r\nimport './Player.scss'\r\n\r\n\r\n\r\nconst Player = ({ url, isMusicPlaying, setIsMusicPlaying }) => {\r\n\r\n    const useAudio = url => {\r\n        const [audio] = useState(new Audio(url));\r\n        // const [playing, setPlaying] = useState(false);\r\n      \r\n        const toggle = () => setIsMusicPlaying(!isMusicPlaying);\r\n      \r\n        useEffect(() => {\r\n            isMusicPlaying ? audio.play() : audio.pause();\r\n          },\r\n          [isMusicPlaying]\r\n        );\r\n      \r\n        useEffect(() => {\r\n          audio.addEventListener('ended', () => setIsMusicPlaying(false));\r\n          return () => {\r\n            audio.removeEventListener('ended', () => setIsMusicPlaying(false));\r\n          };\r\n        }, []);\r\n      \r\n        return [isMusicPlaying, toggle];\r\n      };\r\n  const [playing, toggle] = useAudio(url);\r\n\r\n  return (\r\n    <div className=\"music-player\">\r\n      <button onClick={toggle}>{playing ? \"Pause\" : \"Play\"}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  selectRobot,\r\n  deleteRobot,\r\n} from \"../../state/action-creators/positionActionCreators\";\r\n\r\nconst RobotSelection = () => {\r\n  const robots = useSelector((state) => state.robots.robots);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  if (robots.length > 0) {\r\n    return (\r\n      <div className=\"robot-selection-panel\">\r\n        {robots.map((robot) => {\r\n          return (\r\n            <div key={robot.robotNo}>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch(selectRobot(robot.robotNo));\r\n                }}\r\n              >\r\n                {robot.robotNo}\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch(deleteRobot(robot.robotNo));\r\n                }}\r\n              >\r\n                X - {robot.robotNo}\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>Place New 1st</div>;\r\n};\r\n\r\nexport default RobotSelection;\r\n","import React, { useState } from \"react\";\r\nimport TableTop from \"../components/tableTop/TableTop\";\r\nimport ControlPanel from \"../components/control-panel/ControlPanel\";\r\nimport Dashboard from \"../components/dashboard/Dashboard\";\r\nimport \"./RobotStage.scss\";\r\nimport Player from \"../components/music-player/Player\";\r\nimport RobotSelection from \"../components/robot-selection/RobotSelection\";\r\n\r\nconst RobotStage = () => {\r\n  const [isMusicPlaying, setIsMusicPlaying] = useState(false);\r\n\r\n  return (\r\n    <main className=\"robot-stage\">\r\n      <div className=\"robot-stage__game-part\">\r\n        <TableTop />\r\n      </div>\r\n      <div className=\"robot-stage__control-part\">\r\n        <Dashboard />\r\n        <ControlPanel setIsMusicPlaying={setIsMusicPlaying} />\r\n        <RobotSelection />\r\n      </div>\r\n      <Player\r\n        url={\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-10.mp3\"}\r\n        isMusicPlaying={isMusicPlaying}\r\n        setIsMusicPlaying={setIsMusicPlaying}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default RobotStage;\r\n","import \"./App.css\";\nimport RobotStage from \"./screens/RobotStage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RobotStage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { isTrue } from \"../../utils\";\r\n\r\nconst initialState = {\r\n  totalNo: 0,\r\n  activeRobotNo: undefined,\r\n  robots: [\r\n    // {\r\n    //   robotNo: 1,\r\n    //   x: 0,\r\n    //   y: 0,\r\n    //   face: 0,\r\n    //   isReporting: false,\r\n    // },\r\n  ],\r\n};\r\n\r\n// {\r\n//   robotNo: undefined,\r\n//   x: undefined,\r\n//   y: undefined,\r\n//   face: undefined,\r\n//   isReporting: false,\r\n// }; //face must be 0, 1, 2, 3\r\n\r\n\r\nconst positionReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"PLACE NEW\": {\r\n      if (\r\n        action.payload.x >= 0 &&\r\n        action.payload.y >= 0 &&\r\n        action.payload.x <= 4 &&\r\n        action.payload.y <= 4 &&\r\n        isTrue(action.payload.face)\r\n      ) {\r\n        return {\r\n          ...state,\r\n          totalNo: ++state.totalNo,\r\n          // activeRobotNo: state.robots.length + 1, //new robot is the active robot\r\n          activeRobotNo: state.totalNo,\r\n          robots: [\r\n            ...state.robots,\r\n            {\r\n              robotNo: state.totalNo,// this is apparently not correct. If one robot got deleted, then the next robot you add will have a repulicated robotNo. -- try to make the robotNo a global variable -- like count. \r\n              x: action.payload.x,\r\n              y: action.payload.y,\r\n              face: action.payload.face,\r\n              isReporting: false,\r\n            },\r\n          ],\r\n        };\r\n      }\r\n\r\n      return state;\r\n\r\n      // case \"PLACE\":\r\n      //   if (\r\n      //     action.payload.x >= 0 &&\r\n      //     action.payload.y >= 0 &&\r\n      //     action.payload.x <= 4 &&\r\n      //     action.payload.y <= 4\r\n      //   ) {\r\n      //     return {\r\n      //       ...state,\r\n      //       x: action.payload.x,\r\n      //       y: action.payload.y,\r\n      //       face: action.payload.face,\r\n      //       isReporting: false,\r\n      //     };\r\n      //   }\r\n\r\n      //   return state;\r\n    }\r\n\r\n    case \"MOVE\": {\r\n      // const index = state.robots.findIndex(\r\n      //   (robot) => robot.robotNo === action.payload\r\n      // );\r\n      // const newArray = [...state.robots];\r\n      // const activedRobot = newArray[index];\r\n\r\n      const newArray = state.robots.map((robot) => {\r\n        if (robot.robotNo === action.payload) {\r\n          if (robot.face === 0 && robot.y < 4) {\r\n            return {\r\n              ...robot,\r\n              y: ++robot.y,\r\n              isReporting: false,\r\n            };\r\n          }\r\n          if (robot.face === 1 && robot.x < 4) {\r\n            return {\r\n              ...robot,\r\n              x: ++robot.x,\r\n              isReporting: false,\r\n            };\r\n          }\r\n          if (robot.face === 2 && robot.y > 0) {\r\n            return {\r\n              ...robot,\r\n              y: --robot.y,\r\n              isReporting: false,\r\n            };\r\n          }\r\n          if (robot.face === 3 && robot.x > 0) {\r\n            return {\r\n              ...robot,\r\n              x: --robot.x,\r\n              isReporting: false,\r\n            };\r\n          }\r\n          return robot; //be careful here\r\n        } \r\n        return robot;\r\n        \r\n      });\r\n\r\n      // if (activedRobot.face === 0 && activedRobot.y < 4) {\r\n      //   // return { ...state, y: ++state.y, isReporting: false };\r\n\r\n      //   // let copiedState = {...state}\r\n      //   // ++copiedState.robots[activeRobotNo].y //y increaded by one\r\n      //   // copiedState.robots[activeRobotNo].isReporting = false //disable reporting\r\n      //   // return copiedState\r\n\r\n      //   ++activedRobot.y;\r\n      //   activedRobot.isReporting = false;\r\n\r\n      //   return {\r\n      //     ...state,\r\n      //     robots: newArray,\r\n      //   };\r\n      // }\r\n\r\n      // if (activedRobot.face === 1 && activedRobot.x < 4) {\r\n      //   // return { ...state, x: ++state.x, isReporting: false };\r\n      //   ++activedRobot.x;\r\n      //   activedRobot.isReporting = false;\r\n\r\n      //   return {\r\n      //     ...state,\r\n      //     robots: newArray,\r\n      //   };\r\n      // }\r\n\r\n      // if (activedRobot.face === 2 && activedRobot.y > 0) {\r\n      //   // return { ...state, y: --state.y, isReporting: false };\r\n\r\n      //   --activedRobot.y;\r\n      //   activedRobot.isReporting = false;\r\n\r\n      //   return {\r\n      //     ...state,\r\n      //     robots: newArray,\r\n      //   };\r\n      // }\r\n\r\n      // if (activedRobot.face === 3 && activedRobot.x > 0) {\r\n      //   // return { ...state, x: --state.x, isReporting: false };\r\n      //   --activedRobot.x;\r\n      //   activedRobot.isReporting = false;\r\n\r\n      return {\r\n        ...state,\r\n        robots: newArray,\r\n      };\r\n    }\r\n\r\n    case \"LEFT\": {\r\n      // const index = state.robots.findIndex(\r\n      //   (robot) => robot.robotNo === action.payload\r\n      // );\r\n      // const newArray = [...state.robots];\r\n      // const activedRobot = newArray[index];\r\n      // if (activedRobot.face === 0) {\r\n      //   // return { ...state, face: 3, isReporting: false };\r\n\r\n      //   activedRobot.face = 3;\r\n      //   activedRobot.isReporting = false; //disable reporting\r\n      //   return {\r\n      //     ...state,\r\n      //     robots: newArray,\r\n      //   };\r\n      // } else {\r\n      //   // return {\r\n      //   //   ...state,\r\n      //   //   face: Math.abs((activedRobot.face - 1) % 4),\r\n      //   //   isReporting: false,\r\n      //   // };\r\n\r\n      //   activedRobot.face = Math.abs((activedRobot.face - 1) % 4);\r\n      //   activedRobot.isReporting = false; //disable reporting\r\n\r\n      const newArray = state.robots.map((robot) => {\r\n        if (robot.robotNo === action.payload) {\r\n          if (robot.face === 0) {\r\n            return {\r\n              ...robot,\r\n              face: 3,\r\n              isReporting: false,\r\n            };\r\n          }\r\n          return {\r\n            ...robot,\r\n            face: Math.abs((robot.face - 1) % 4),\r\n            isReporting: false,\r\n          };\r\n        } else {\r\n          return robot;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        robots: newArray,\r\n      };\r\n    }\r\n\r\n    case \"RIGHT\": {\r\n      ////////////////////////////////////////////////////////////\r\n      // const index = state.robots.findIndex(\r\n      //   (robot) => robot.robotNo === action.payload\r\n      // );\r\n      // const newArray = [...state.robots];\r\n      // const activedRobot = newArray[index];\r\n      // activedRobot.face = Math.abs((activedRobot.face + 1) % 4);\r\n      // activedRobot.isReporting = false; //disable reporting\r\n      // return {\r\n      //   ...state,\r\n      //   robots: newArray,\r\n      // };\r\n      /////////////////////////////////////////////////////////////\r\n      // return {\r\n      //   ...state,\r\n      //   face: Math.abs((state.face + 1) % 4),\r\n      //   isReporting: false,\r\n      // };\r\n\r\n      ////////////////////////map way working////////////////////////////\r\n      const newArray = state.robots.map((robot) => {\r\n        if (robot.robotNo === action.payload) {\r\n          return {\r\n            ...robot,\r\n            face: Math.abs((robot.face + 1) % 4),\r\n            isReporting: false,\r\n          };\r\n        } else {\r\n          return robot;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        robots: newArray,\r\n      };\r\n    }\r\n\r\n    case \"REPORT\": {\r\n      //////////////////////////////findIndex way is not working/////////////////////////////\r\n      // const index = state.robots.findIndex((robot) => robot.robotNo === action.payload)\r\n      // const newArray = [...state.robots]\r\n      // const activedRobot = newArray[index]\r\n      //  activedRobot.isReporting = true //ensable reporting\r\n\r\n      /////////////////////map way is working////////////////////////////////////////////\r\n\r\n      const newArray = state.robots.map((robot) => {\r\n        \r\n        if (robot.robotNo === action.payload) {\r\n          return {\r\n            ...robot,\r\n            isReporting: true,\r\n          };\r\n        } else {\r\n          console.log('wrong 1');\r\n          return robot;\r\n        }\r\n      });\r\n      \r\n      return {\r\n        ...state,\r\n        robots: newArray,\r\n      };\r\n    }\r\n\r\n    case \"RESET\": {\r\n      return {\r\n        ...state,\r\n        totalNo: 0,\r\n        activeRobotNo: undefined,\r\n        robots: [],\r\n      };\r\n    }\r\n\r\n    case \"SELECT\": {\r\n      return {\r\n        ...state,\r\n        activeRobotNo: action.payload,\r\n      };\r\n    }\r\n\r\n    case \"DELETE\": {\r\n      const filteredRobots = state.robots.filter(\r\n        (robot) => robot.robotNo !== action.payload\r\n      );\r\n\r\n      // const filteredRobots = state.robots.map((robot) => {\r\n\r\n      //   if (robot.robotNo !== action.payload) {\r\n      //     return robot\r\n      //   }\r\n\r\n      //   return {\r\n      //     robotNo: undefined,\r\n      //     x: undefined,\r\n      //     y: undefined,\r\n      //     face: undefined,\r\n      //     isReporting: false\r\n      //   }\r\n      // })\r\n\r\n      if (filteredRobots.length === 0) {\r\n        return {\r\n          ...state,\r\n          activeRobotNo: undefined,\r\n          robots: [],\r\n        };\r\n      }\r\n\r\n      if (filteredRobots.length > 0 && state.activeRobotNo === action.payload) {\r\n\r\n        const allRobotNo = filteredRobots.map(robot => (robot.robotNo))\r\n        return {\r\n          ...state,\r\n          activeRobotNo: Math.max.apply(Math, allRobotNo),//find the max number in the array\r\n          robots: filteredRobots,\r\n        };\r\n      }\r\n\r\n\r\n      return {\r\n        ...state,\r\n        robots: filteredRobots,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// console.log(positionReducer({x: 1, y: 2, face: 0}, {type: \"RIGHT\"}));\r\n\r\nexport default positionReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport robots from './positionReducer'\r\n\r\nconst reducers = combineReducers({\r\n\r\n    robots,//this is a key, so it will be state.robots.robots[0] to get the single robot info\r\n})\r\n\r\nexport default reducers\r\n\r\n\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducers from \"./reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport const store = createStore(reducers, {}, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}